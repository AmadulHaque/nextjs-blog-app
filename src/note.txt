To implement a simple CRUD application with authentication in Next.js (frontend) and Laravel (backend) without using TypeScript, follow these steps. This guide covers authentication using NextAuth.js for the frontend and JWT for the backend.
Step 1: Set up Laravel Backend
1.1 Install Laravel

Ensure you have Composer installed, then create a new Laravel project:

bash

composer create-project laravel/laravel my-laravel-app
cd my-laravel-app

1.2 Install JWT Package

Install tymon/jwt-auth package for JWT authentication:

bash

composer require tymon/jwt-auth
php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"
php artisan jwt:secret

1.3 Configure Authentication

In config/auth.php, set the guard to api:

php

'defaults' => [
    'guard' => 'api',
    'passwords' => 'users',
],

In the guards array, update the api driver to jwt:

php

'api' => [
    'driver' => 'jwt',
    'provider' => 'users',
    'hash' => false,
],

1.4 Create Auth Controller

Generate an auth controller:

bash

php artisan make:controller AuthController

In app/Http/Controllers/AuthController.php, add the login logic:

php

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\User;
use Validator;

class AuthController extends Controller
{
    public function login(Request $request)
    {
        $credentials = $request->only('email', 'password');

        if ($token = Auth::attempt($credentials)) {
            return response()->json(['token' => $token]);
        }

        return response()->json(['error' => 'Unauthorized'], 401);
    }

    public function register(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:6|confirmed',
        ]);

        if ($validator->fails()) {
            return response()->json($validator->errors(), 400);
        }

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => bcrypt($request->password),
        ]);

        $token = Auth::login($user);

        return response()->json(['token' => $token]);
    }

    public function logout()
    {
        Auth::logout();
        return response()->json(['message' => 'Successfully logged out']);
    }

    public function userProfile()
    {
        return response()->json(Auth::user());
    }
}

1.5 Set Up Routes

In routes/api.php, add routes for authentication:

php

use App\Http\Controllers\AuthController;

Route::post('login', [AuthController::class, 'login']);
Route::post('register', [AuthController::class, 'register']);
Route::post('logout', [AuthController::class, 'logout'])->middleware('auth:api');
Route::get('profile', [AuthController::class, 'userProfile'])->middleware('auth:api');

Step 2: Set up Next.js Frontend
2.1 Create Next.js Project

bash

npx create-next-app my-next-app
cd my-next-app

2.2 Install NextAuth.js

bash

npm install next-auth axios

2.3 Configure NextAuth.js

Create a file at pages/api/auth/[...nextauth].js:

javascript

import NextAuth from "next-auth";
import Providers from "next-auth/providers";
import axios from "axios";

export default NextAuth({
  providers: [
    Providers.Credentials({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
      },
      authorize: async (credentials) => {
        try {
          const res = await axios.post("http://localhost:8000/api/login", {
            email: credentials.email,
            password: credentials.password,
          });

          const user = res.data;

          if (user) {
            return Promise.resolve(user);
          } else {
            return Promise.resolve(null);
          }
        } catch (error) {
          return Promise.resolve(null);
        }
      },
    }),
  ],
  callbacks: {
    jwt: async (token, user) => {
      if (user) {
        token.accessToken = user.token;
      }
      return token;
    },
    session: async (session, token) => {
      session.accessToken = token.accessToken;
      return session;
    },
  },
  pages: {
    signIn: "/auth/signin",
  },
});

2.4 Create Sign In Page

Create a sign-in page at pages/auth/signin.js:

javascript

import { signIn } from "next-auth/client";
import { useState } from "react";

export default function SignIn() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    await signIn("credentials", {
      email,
      password,
      callbackUrl: "/",
    });
  };

  return (
    <div>
      <form onSubmit={handleSubmit}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit">Sign In</button>
      </form>
    </div>
  );
}

2.5 Protecting Routes

Create a custom hook for authenticated routes:

javascript

import { useSession, signIn } from "next-auth/client";
import { useEffect } from "react";
import { useRouter } from "next/router";

export default function useAuth({ redirectTo = "/auth/signin" } = {}) {
  const [session, loading] = useSession();
  const router = useRouter();

  useEffect(() => {
    if (!loading && !session) {
      router.push(redirectTo);
    }
  }, [loading, session]);

  return [session, loading];
}

Use the hook in a protected page (e.g., pages/profile.js):

javascript

import useAuth from "../hooks/useAuth";

export default function Profile() {
  const [session, loading] = useAuth();

  if (loading) return <p>Loading...</p>;

  return (
    <div>
      <h1>Profile</h1>
      <p>{session.user.email}</p>
    </div>
  );
}

Step 3: CRUD Operations
3.1 Create CRUD Endpoints in Laravel

Add CRUD routes in routes/api.php:

php

use App\Http\Controllers\PostController;

Route::middleware('auth:api')->group(function () {
    Route::get('posts', [PostController::class, 'index']);
    Route::post('posts', [PostController::class, 'store']);
    Route::get('posts/{id}', [PostController::class, 'show']);
    Route::put('posts/{id}', [PostController::class, 'update']);
    Route::delete('posts/{id}', [PostController::class, 'destroy']);
});

Generate the PostController:

bash

php artisan make:controller PostController --resource

Implement CRUD methods in app/Http/Controllers/PostController.php:

php

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Post;

class PostController extends Controller
{
    public function index()
    {
        return Post::all();
    }

    public function store(Request $request)
    {
        $post = Post::create($request->all());
        return response()->json($post, 201);
    }

    public function show($id)
    {
        return Post::find($id);
    }

    public function update(Request $request, $id)
    {
        $post = Post::findOrFail($id);
        $post->update($request->all());
        return response()->json($post, 200);
    }

    public function destroy($id)
    {
        Post::destroy($id);
        return response()->json(null, 204);
    }
}

3.2 Create CRUD Pages in Next.js

Create a page to display posts at pages/posts.js:

javascript

import useAuth from "../hooks/useAuth";
import axios from "axios";

export default function Posts() {
  const [session, loading] = useAuth();
  const [posts, setPosts] = useState([]);

  useEffect(() => {
    if (session) {
      axios
        .get("http://localhost:8000/api/posts", {
          headers: { Authorization: `Bearer ${session.accessToken}` },
        })
        .then((response) => setPosts(response.data));
    }
  }, [session]);

  if (loading) return <p>Loading...</p>;

  return (
    <div>
      <h1>Posts</h1>
      <ul>
        {posts.map((post) => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </div>
  );
}

Add a page to create posts at pages/create-post.js:

javascript

import useAuth from "../hooks/useAuth";
import axios from "axios";
import { useState } from "react";

export default function CreatePost() {
  const [session, loading] = useAuth();
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    await axios.post(
      "http://localhost:8000/api/posts",
      { title, content },
      { headers: { Authorization: `Bearer ${session.accessToken}` } }
    );
  };

  if (loading) return <p>Loading...</p>;

  return (
    <div>
      <h1>Create Post</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
        />
        <textarea
          placeholder="Content"
          value={content}
          onChange={(e) => setContent(e.target.value)}
        ></textarea>
        <button type="submit">Create</button>
      </form>
    </div>
  );
}

Step 4: Running the Application

Run the Laravel backend:

bash

php artisan serve

Run the Next.js frontend:

bash

npm run dev

You now have a basic CRUD application with authentication using Next.js for the frontend and Laravel for the backend.